{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyM63HcYGwtFzC3PvRdW3Ao8"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OdfMN6reKUes","executionInfo":{"status":"ok","timestamp":1710825792755,"user_tz":-330,"elapsed":10,"user":{"displayName":"KANDULA VENKATA SAI SREYA 421161","userId":"07016230222716368859"}},"outputId":"e6812b36-6f1f-4ad3-cc9e-3ffbf4181f7f"},"outputs":[{"output_type":"stream","name":"stdout","text":["Router A: {'A': 'C', 'B': 'C', 'C': 'C', 'D': 'C'}\n","Router B: {'B': 'A', 'A': 'A', 'C': 'A', 'D': 'A'}\n","Router C: {'C': 'A', 'A': 'A', 'B': 'A', 'D': 'A'}\n","Router D: {'D': 'C', 'A': 'C', 'B': 'C', 'C': 'C'}\n"]}],"source":["from collections import defaultdict\n","import heapq\n","\n","# Initialize link state database with own links and costs\n","link_state_database = {\n","    'A': {'B': 2, 'C': 1, 'D': 3},\n","    'B': {'A': 2, 'C': 4, 'D': 2},\n","    'C': {'A': 1, 'B': 4, 'D': 1},\n","    'D': {'A': 3, 'B': 2, 'C': 1}\n","}\n","\n","# Flood link state updates to all other routers\n","def flood_updates():\n","    for router in link_state_database:\n","        for neighbor in link_state_database[router]:\n","            send(link_state_database[router], neighbor)\n","\n","# Receive link state updates from neighbors and update database\n","def receive_update(received_update):\n","    for router in received_update:\n","        link_state_database[router].update(received_update[router])\n","\n","# Use Dijkstra's algorithm to calculate shortest paths\n","def dijkstra(source):\n","    shortest_paths = defaultdict(lambda: float('inf'))\n","    shortest_paths[source] = 0\n","    visited = set()\n","    queue = [(0, source)]\n","    while queue:\n","        cost, node = heapq.heappop(queue)\n","        if node not in visited:\n","            visited.add(node)\n","            for neighbor, link_cost in link_state_database[node].items():\n","                new_cost = cost + link_cost\n","                if new_cost < shortest_paths[neighbor]:\n","                    shortest_paths[neighbor] = new_cost\n","                    heapq.heappush(queue, (new_cost, neighbor))\n","    return shortest_paths\n","\n","# Update routing table based on shortest paths\n","def update_routing_table(shortest_paths):\n","    routing_table = {}\n","    for destination in shortest_paths:\n","        next_hop = min(link_state_database[router], key=lambda x: shortest_paths[x])\n","        routing_table[destination] = next_hop\n","    return routing_table\n","\n","# Simulate send function\n","def send(update, neighbor):\n","    pass  # Simulated send function\n","\n","# Main loop\n","while True:\n","    previous_database = dict(link_state_database)\n","    flood_updates()\n","    if link_state_database == previous_database:\n","        break\n","\n","# Output final routing table\n","for router in link_state_database:\n","    shortest_paths = dijkstra(router)\n","    routing_table = update_routing_table(shortest_paths)\n","    print(f\"Router {router}: {routing_table}\")\n"]}]}