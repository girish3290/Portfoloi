{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNWd7zlwYVNeobLCseNgSpM"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lhx6zVUOH6mF","executionInfo":{"status":"ok","timestamp":1710825676683,"user_tz":-330,"elapsed":647,"user":{"displayName":"KANDULA VENKATA SAI SREYA 421161","userId":"07016230222716368859"}},"outputId":"8ddf164f-7860-4dd8-b5fd-6a74aa8bde6a"},"outputs":[{"output_type":"stream","name":"stdout","text":["Router A: {'A': 0, 'B': 2, 'C': 1, 'D': 3}\n","Router B: {'A': 2, 'B': 0, 'C': 4, 'D': 2}\n","Router C: {'A': 1, 'B': 4, 'C': 0, 'D': 1}\n","Router D: {'A': 3, 'B': 2, 'C': 1, 'D': 0}\n"]}],"source":["import copy\n","\n","# Initialize distance vector table with own distances to all nodes\n","distance_vector_table = {\n","    'A': {'A': 0, 'B': 2, 'C': 1, 'D': 3},\n","    'B': {'A': 2, 'B': 0, 'C': 4, 'D': 2},\n","    'C': {'A': 1, 'B': 4, 'C': 0, 'D': 1},\n","    'D': {'A': 3, 'B': 2, 'C': 1, 'D': 0}\n","}\n","\n","# Exchange distance vectors with neighbors\n","def exchange_vectors():\n","    for router in distance_vector_table:\n","        vector_copy = copy.deepcopy(distance_vector_table[router])\n","        for neighbor in vector_copy:\n","            if neighbor != router:\n","                # Simulate sending to and receiving from neighbors\n","                receive(vector_copy, neighbor)\n","                send(distance_vector_table[router], neighbor)\n","\n","\n","# Receive distance vectors from neighbors and update own table\n","def receive(received_vector, neighbor):\n","    for destination in distance_vector_table:\n","        distance_to_destination = received_vector[destination] + distance_vector_table[neighbor][destination]\n","        if distance_to_destination < distance_vector_table[neighbor][destination]:\n","            distance_vector_table[neighbor][destination] = distance_to_destination\n","\n","\n","\n","# Simulate sending function\n","def send(vector, neighbor):\n","    pass  # Simulated send function\n","\n","# Main loop\n","while True:\n","    previous_table = copy.deepcopy(distance_vector_table)\n","    exchange_vectors()\n","    if distance_vector_table == previous_table:\n","        break\n","\n","# Output final distance vector table\n","for router in distance_vector_table:\n","    print(f\"Router {router}: {distance_vector_table[router]}\")\n"]}]}